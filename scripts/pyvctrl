#!/usr/bin/env python

# Disclaimer: Please regard that the following implementation supports only
#             the special installation of a Vitodens200 at my home. I have
#             replaced the external temperature sensor with a 22k resistor,
#             resulting in a fixed external temperature of 8C!

import os
import sys
import time
import datetime
import pyvctrl

#
# Evaluation of data values in LibreCalc...
#
#  =WENN(IDENTISCH(B2;"an");1;0)
#


# Set to 'False' for operational service, this will
# enable the actual setting/resetting of the heating
# curve parameters...
debug_mode = True

print_info = True

print_data = True

# Fixed external temperature (see disclaimer above!)
external_temperature = 8.0
# Fixed room temperature (see disclaimer above!)
room_temperature = 23.0

# VLsoll default value
VLDEFAULT = 65.0

# VLsoll values for the single months 1-12 (Jan-Dec)
target_vl = {1 : VLDEFAULT,
             2 : VLDEFAULT,
             3 : VLDEFAULT,
             4 : VLDEFAULT,
             5 : VLDEFAULT,
             6 : VLDEFAULT,
             7 : VLDEFAULT,
             8 : VLDEFAULT,
             9 : VLDEFAULT,
             10 : VLDEFAULT,
             11 : VLDEFAULT,
             12 : VLDEFAULT
            }

# The values that should get requested via vclient continuously.
logged_values = ['getVitoTempKesselIst',
                 'getVitoTempKesselSoll',
                 'getVitoStatusFlamme',
                 'getVitoKennlinieNeigung',
                 'getVitoKennlinieNiveau',
                 'getVitoTempVL',
                 'getVitoTempRLIst',
                 'getVitoStatusStoerung']

# The "probe" command that gets used to check whether the connection
# to the Vito* is alive (again).
probe_commands = ['getVitoStatusFlamme','getVitoStatusStoerung']

# Maximal niveau values: -13 - 40
niveau_interval = ['24.0', '34.0']
# Maximal slope values: 0.2 - 3.5
slope_interval = ['0.2', '0.4']
# Slope value for marking an increased VLsoll
slope_high = '0.7'

last_slope = '0.3'

# Wait 1 cycle (= 5s) before raising the heating niveaus
# after the flame was detected to be switched on
nvmax = 1
# Wait 12 cycles (= 60s) for the burnin phase to complete,
# after this time the heating niveaus will be lowered again
# back to their original values.
burninmax = 12


def printInfo(info):
    """ Simple wrapper for printing info messages.
    """
    if print_info:
        print(info)

def printData(data):
    """ Simple wrapper for printing data messages.
    """
    if print_data:
        print(data)

def vitoIsConnected():
    """ Returns True if we can reach the Vito and communication
        seems to be possible.
    """
    data = pyvctrl.readVclientData(probe_commands)
    if not data:
        return False

    if 'getVitoStatusStoerung' in data and data['getVitoStatusStoerung'] != '0.0':
        return False

    return True

def heatingValuesArePermissible(slope, niveau):
    """ Checks whether the heating curve params are in a
        good range by checking the resulting VLsoll.
    """
    if slope >= 0.7:
        return False
    vt = pyvctrl.vt(room_temperature, external_temperature, external_temperature, slope, niveau)
    if vt > 45.0 and vt < 77.0:
        return True
    return False

def getVLForMonth():
    tt = datetime.datetime.now()
    return target_vl[tt.month]

def findNiveauForVLTemp(slope, vl):
    """ Loop over the vt values until we find a niveau,
        such that the resulting VLsoll is at least vl.
    """
    niveau = -13

    while (niveau < 40):
        vt = pyvctrl.vt(room_temperature, external_temperature, external_temperature, slope, niveau)
        if vt > vl:
            break

    return niveau

def initNiveau(data):
    """ Ensure that the heating niveau initially is in a sane
        interval, and set the slope of the heating function
        to the configured marker value.
    """

    if not data:
        return False

    try:
        niveau = int(data['getVitoKennlinienNiveau'])
        slope = float(data['getVitoKennlinieNeigung'])

        initvals = False
        # Compare values against allowed interval and reset if necessary...
        if data['getVitoKennlinieNeigung'] == '0.7':
            # Looks like the heat curve was raised before (in a previous run
            # of the script), so reset it
            slope = 0.3
            niveau -= 4
            initvals = True

        # Check whether new values are also within a permissible range
        if not heatingValuesArePermissible(slope, niveau):
            niveau = findNiveauForVLTemp(slope, getVLForMonth())
            initvals = True

        vt = pyvctrl.vt(room_temperature, external_temperature, external_temperature, slope, niveau)
        if initvals:
            printInfo("Setting niveau to %.4f / %.4f  => %.4f VLtemp initially" % (slope, niveau, vt))

            if not debug_mode:
                data['getVitoKennlinienNiveau'] = "%d" % niveau
                data['getVitoKennlinieNeigung'] = "%.4f" % slope

                if not pyvctrl.setVclientData(data):
                    return False
        else:
            printInfo("Initial values of %.4f / %.4f  => %.4f VLtemp initially accepted" % (slope, niveau, vt))

    except:
        return False

    return True

def increaseNiveau(data):
    """ Raise the heating niveau, such that the burner isn't shut
        off immediately.
        Set the slope of the heating function
        to the configured "slope_high" marker value.
    """
    global last_slope
    if not data:
        return False

    try:
        niveau = int(data['getVitoKennlinieNiveau'])
        slope = float(data['getVitoKennlinieNeigung'])
    except:
        return False

    # Store current slope value
    last_slope = slope

    # Mark slope as having been "touched" (= changed by the script)
    slope = 0.7
    # Add 4k to heating niveau
    niveau += 4

    # Check whether new values are also within a permissible range
    if not heatingValuesArePermissible(slope, niveau):
        return False

    vt = pyvctrl.vt(room_temperature, external_temperature, external_temperature, slope, niveau)
    printInfo("Raising niveau to %.4f / %.4f  => %.4f VLtemp for %ds" % (slope, niveau, vt, burninmax*5))

    if not debug_mode:
        data['getVitoKennlinienNiveau'] = "%d" % niveau
        data['getVitoKennlinieNeigung'] = "%.4f" % slope

        if not pyvctrl.setVclientData(data):
            return False

    return True

def decreaseNiveau(data):
    """ Ensure that the heating niveau initially is in a sane
        interval, and set the slope of the heating function
        to the configured value.
    """
    if not data:
        return False

    try:
        niveau = int(data['getVitoKennlinienNiveau'])
        slope = float(data['getVitoKennlinieNeigung'])

        initvals = False
        # Compare values against allowed interval and reset if necessary...
        if data['getVitoKennlinieNeigung'] == '0.7':
            # Looks like the heat curve was raised before (in a previous run
            # of the script), so reset it
            slope = last_slope
            niveau -= 4
            initvals = True

        # Check whether new values are also within a permissible range
        if not heatingValuesArePermissible(slope, niveau):
            slope = 0.3
            niveau = findNiveauForVLTemp(slope, getVLForMonth())
            initvals = True

        vt = pyvctrl.vt(room_temperature, external_temperature, external_temperature, slope, niveau)
        if initvals:
            printInfo("Resetting niveau back to %.4f / %.4f  => %.4f VLtemp" % (slope, niveau, vt))

            if not debug_mode:
                data['getVitoKennlinienNiveau'] = "%d" % niveau
                data['getVitoKennlinieNeigung'] = "%.4f" % slope

                if not pyvctrl.setVclientData(data):
                    return False
        else:
            printInfo("Values of %.4f / %.4f  => %.4f VLtemp seem to be already reset, no action" % (slope, niveau, vt))

    except:
        return False

    return True


def dataLine(data):
    line = ""
    # Format current date and time
    tnow = datetime.datetime.now()
    line += tnow.isoformat()
    # Add the actual values
    for key in logged_values:
        if key in data:
            line += ", %s" % data[key]
        else:
            line += ","

    return line

def dataHeader():
    line = ""
    line += "Time"
    # Add the actual values
    for key in logged_values:
        line += ", %s" % key

    return line

def logData(data, fpath):
    with open(fpath, "a") as fout:
        fout.write(dataLine(data))
        fout.write("\n")

def initLogFile(fpath):
    if not os.path.isfile(fpath):
        with open(fpath, "w") as fout:
            fout.write(dataHeader())
            fout.write("\n")

def vitoData():
    return pyvctrl.readVclientData(logged_values)

# No connection to the Vitodens
MVOID = 0
# Waiting for the flame to turn/be off
MFLINIT = 1
# Waiting for the flame to turn on
MFLWAIT = 2
# Flame is on, waiting ~5s to correct niveau
MNVWAIT = 3
# Flame on, niveau corrected, waiting until burn-in complete
MBURNIN = 4
# Waiting for the flame to turn off
MHEAT = 5

def vito_monitor(logging, watching, fpath):
    """ First simple version of our main loop, which is only able to
        log the current values.
    """
    data = {}
    mode = MVOID
    nvwait = 0
    burninwait = 0

    while 1:
        if mode == MVOID:
            # Try to reach Vito via vclient
            if vitoIsConnected():
                mode = MFLINIT
                printInfo("Mode MFLINIT")
        else:
            # Try to read data values
            data = vitoData()
            if not data:
                # Fall back to error/void mode
                mode = MVOID
                printInfo("Mode MVOID")
            else:
                # Print data
                printData(dataLine(data))
                # Log data
                if logging:
                    logData(data, fpath)

                # Handle process state (and transitions)
                if mode == MFLINIT:
                    # Check flame status, wait until off
                    if ('getVitoStatusFlamme' in data and 
                        data['getVitoStatusFlamme'] == "aus"):
                        mode = MFLWAIT
                        printInfo("Mode MFLWAIT")
                        if watching:
                            # Try to init heating niveau again
                            if not initNiveau(data):
                                # Assume that the connection is lost
                                mode = MVOID
                                printInfo("Mode MFLWAIT")
                elif mode == MFLWAIT:
                    # Check flame status, wait until on
                    if ('getVitoStatusFlamme' in data and 
                        data['getVitoStatusFlamme'] == "an"):
                        mode = MNVWAIT
                        nvwait = 0
                        printInfo("Mode MNVWAIT")
                elif mode == MNVWAIT:
                    # Take into account that the flame could die
                    # in the meantime -> check flame status and switch back to MFLWAIT!
                    if ('getVitoStatusFlamme' in data and 
                        data['getVitoStatusFlamme'] == "aus"):
                        mode = MFLWAIT
                        nvwait = 0
                        printInfo("Mode MFLWAIT")
                    else:
                        # Process normal wait for burnin phase
                        nvwait += 1
                        if nvwait == nvmax:
                            mode = MBURNIN
                            printInfo("Mode MBURNIN")
                            burninwait = 0
                            if watching:
                                # Try to increase heating niveau
                                if not increaseNiveau(data):
                                    # Assume that the connection is lost
                                    mode = MVOID
                                    printInfo("Mode MVOID")
                elif mode == MBURNIN:
                    # Take into account that the flame could die
                    # in the meantime -> check flame status and switch back to MFLWAIT!
                    resetniveau = False
                    if ('getVitoStatusFlamme' in data and 
                        data['getVitoStatusFlamme'] == "aus"):
                        mode = MFLWAIT
                        nvwait = 0
                        printInfo("Mode MFLWAIT")
                        resetniveau = True
                    else:
                        # Process normal waiting for reset
                        burninwait += 1
                        if burninwait == burninmax:
                            mode = MHEAT
                            printInfo("Mode MHEAT")
                            if watching:
                                resetniveau = True
                    if resetniveau:
                        # Try to decrease heating niveau again
                        if not decreaseNiveau(data):
                            # Assume that the connection is lost
                            mode = MVOID
                            printInfo("Mode MVOID")
                elif mode == MHEAT:
                    # Check flame status, wait until off
                    if ('getVitoStatusFlamme' in data and 
                        data['getVitoStatusFlamme'] == "aus"):
                        mode = MFLWAIT
                        printInfo("Mode MFLWAIT")

        time.sleep(5)


def usage():
    print("""pyvctrl v1.0 Dirk Baechle, <dl9obn@darc.de>, 2022-01-10

Usage:

  pyvctrl [-h] [-l] [-w] [filename]

where options are:

  -h : Display this help message

  -l : Logging mode, output the currently available parameters to the logfile on every read

  -w : Watch mode, the script will actively change the heat niveaus

  filename : Set the name of the logfile (default: 'pyvctrl.log')

""")


def main():
    # Process command line arguments
    logmode = False
    watchmode = False
    fpath = "pyvctrl.log"

    for arg in sys.argv[1:]:
        if arg in ["-h","-?","--help"]:
            usage()
            sys.exit(0)

        elif arg in ["-l","--logging","--logging-mode"]:
            logmode = True
        elif arg in ["-w","--watch","--watch-mode"]:
            watchmode = True
        else:
            fpath = arg

    # Initialize logfile
    if logmode:
        initLogFile(fpath)

    # Start watching/logging
    vito_monitor(logmode, watchmode, fpath)


if __name__ == "__main__":
    main()
